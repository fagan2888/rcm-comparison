% Author: Jean-Philippe Raymond (raymonjp@iro.umontreal.ca)
% =========================================================


% Seed used for the partitionning of the observations into three sets (training,
% validation and test).
RNG_SEED = 2015; % 2015, 4055, 1234, 1107

OBS_FILE = 'data/observationsForEstimBAI.txt';
TRAIN_SET_SIZE = 916; % ~50%
VALID_SET_SIZE = 458; % ~25%
% TEST_SET_SIZE = 1832 - TRAIN_SET_SIZE - VALID_SET_SIZE; % ~25%

% ===========================================================================
% Parameters for EPS
% ---------------------------------------------------------------------------
BETAS = [-1.8, -0.9, -0.8, -4.0]; % The betas we use for path sampling during
                                  % the EPS estimation.

% The betas we use for prediction. They will be estimated if empty.
ESTIMATED_BETAS = [-2.7629, -0.9894, -0.5637, -4.3165, 1.5382]; % 2015
% ESTIMATED_BETAS = [-2.7538, -0.9936, -0.5638, -4.4168, 1.5303]; % 2015-0
% ESTIMATED_BETAS = [-2.7957, -1.0009, -0.5746, -4.3560, 1.6793]; % 2015-1
% ESTIMATED_BETAS = [-2.7249, -1.0042, -0.5713, -4.2882, 1.5610]; % 2015-2
% ESTIMATED_BETAS = [-2.7837, -1.0408, -0.5522, -4.5471, 1.6769]; % 4055
% ESTIMATED_BETAS = [-2.7271, -1.0380, -0.5456, -4.5208, 1.5076]; % 4055-0
% ESTIMATED_BETAS = [-2.7479, -1.0426, -0.5568, -4.5872, 1.5840]; % 4055-1
% ESTIMATED_BETAS = [-2.6685, -1.0327, -0.5739, -4.5314, 1.5995]; % 4055-2
% ESTIMATED_BETAS = [-2.7976, -1.0199, -0.5155, -4.3735, 1.4404]; % 1234
% ESTIMATED_BETAS = [-2.7853, -1.0100, -0.5109, -4.3770, 1.4202]; % 1234-0
% ESTIMATED_BETAS = [-2.7933, -1.0061, -0.5195, -4.3193, 1.4420]; % 1234-1
% ESTIMATED_BETAS = [-2.7803, -1.0186, -0.5123, -4.3482, 1.4397]; % 1234-2
% ESTIMATED_BETAS = [-2.8213, -0.9882, -0.5245, -4.3400, 1.5142]; % 1107
% ESTIMATED_BETAS = [-2.9271, -1.0125, -0.5262, -4.3340, 1.7013]; % 1107-0
% ESTIMATED_BETAS = [-2.8129, -0.9818, -0.5303, -4.3802, 1.5287]; % 1107-1
% ESTIMATED_BETAS = [-2.8693, -0.9923, -0.5146, -4.3514, 1.5949]; % 1107-2
% ===========================================================================

% ================================================================================
% Parameters for RL
% --------------------------------------------------------------------------------
LINK_SIZE_BETAS = [-2.5, -1, -0.4, -20.0];

% ESTIMATED_BETAS_RL = [-2.4225, -0.9223, -0.4394, -4.3992]; % 2015
ESTIMATED_BETAS_RL = [-3.0416, -1.0571, -0.3720, -4.4641, -0.2309]; % 2015 w/ LS
% ESTIMATED_BETAS_RL = [-2.4148, -0.9415, -0.4189, -4.5826]; % 4055
% ESTIMATED_BETAS_RL = [-3.0522, -1.1001, -0.3504, -4.6854, -0.2601]; % 4055 w/ LS
% ESTIMATED_BETAS_RL = [-2.5553, -0.9608, -0.3932, -4.4352]; % 1234
% ESTIMATED_BETAS_RL = [-3.0555, -1.0655, -0.3476, -4.4597, -0.2233]; % 1234 w/ L
% ESTIMATED_BETAS_RL = [-2.5794, -0.9319, -0.3910, -4.4298]; % 1107
% ESTIMATED_BETAS_RL = [-3.2173, -1.0459, -0.3311, -4.4711, -0.2488]; % 1107 w/ L
% ================================================================================


addpath('code');
addpath('project_code');

rng(RNG_SEED);

% We partition the observations into three sets.
myObs = spconvert(load(OBS_FILE));
myObs = myObs(randperm(size(myObs, 1)), :); % Shuffling the observations.
idxEndTrain = TRAIN_SET_SIZE;
idxEndValid = TRAIN_SET_SIZE + VALID_SET_SIZE;
trainSet = myObs(1:idxEndTrain, :);
validSet = myObs(idxEndTrain+1:idxEndValid, :);
testSet = myObs(idxEndValid+1:end, :);

rng('shuffle');

nDraws = 500;
nIterations = 5;
% cachedVariables = load('proba_cache/valid2015_250_25_-2.7629_-0.9894_-0.5637_-4.3165_1.5382.mat');
probabilities = psProbabilities(validSet, ...
                                ESTIMATED_BETAS, ...
                                nDraws, ...
                                @(x) fixedNumberOfIterationsCriteria(x, nIterations));
                                % cachedVariables.probas);
save(sprintf('results/valid%d_ps_%d_%d_%s.mat', ...
             RNG_SEED, nDraws, nIterations, floatsToString(ESTIMATED_BETAS')));
return;

% We generate paths for training.
%
% TODO: Do with a loop.
train5 = pathGeneration(trainSet, ...
                        sprintf('train%d', RNG_SEED), ...
                        5, ...
                        BETAS, ...
                        true, ...
                        'rngSeed', 110725);

train10 = pathGeneration(trainSet, ...
                         sprintf('train%d', RNG_SEED), ...
                         10, ...
                         BETAS, ...
                         false, ...
                         'nest', train5, ...
                         'rngSeed', 1107210);

train25 = pathGeneration(trainSet, ...
                         sprintf('train%d', RNG_SEED), ...
                         25, ...
                         BETAS, ...
                         false, ...
                         'nest', train10, ...
                         'rngSeed', 1107225);

train50 = pathGeneration(trainSet, ...
                         sprintf('train%d', RNG_SEED), ...
                         50, ...
                         BETAS, ...
                         false, ...
                         'nest', train25, ...
                         'rngSeed', 1107250);

train100 = pathGeneration(trainSet, ...
                          sprintf('train%d', RNG_SEED), ...
                          100, ...
                          BETAS, ...
                          false, ...
                          'nest', train50, ...
                          'rngSeed', 11072100);

train250 = pathGeneration(trainSet, ...
                          sprintf('train%d', RNG_SEED), ...
                          250, ...
                          BETAS, ...
                          false, ...
                          'nest', train100, ...
                          'rngSeed', 11072250);

train500 = pathGeneration(trainSet, ...
                          sprintf('train%d', RNG_SEED), ...
                          500, ...
                          BETAS, ...
                          false, ...
                          'nest', train250, ...
                          'rngSeed', 11072500);

%{
% =======================================================
% We estimate the models.
% -------------------------------------------------------
paths = getPaths(train50);

estimatedBetas = psEstimation(trainSet, paths, BETAS);
save('betas.mat', 'estimatedBetas');

estimatedBetas = rlEstimation(trainSet);
save('rlBetas.mat', 'estimatedBetas');

estimatedBetas = rlEstimation(trainSet, LINK_SIZE_BETAS);
save('rlWithLinkSizeBetas.mat', 'estimatedBetas');
% =======================================================
%}

% We generate paths for validation.
%
% TODO: Do with a loop.
valid5 = pathGeneration(validSet, ...
                       sprintf('valid%d', RNG_SEED), ...
                       5, ...
                       ESTIMATED_BETAS, ...
                       false, ...
                       'rngSeed', 110725);

valid10 = pathGeneration(validSet, ...
                        sprintf('valid%d', RNG_SEED), ...
                        10, ...
                        ESTIMATED_BETAS, ...
                        false, ...
                        'nest', valid5, ...
                        'rngSeed', 1107210);

valid25 = pathGeneration(validSet, ...
                         sprintf('valid%d', RNG_SEED), ...
                         25, ...
                         ESTIMATED_BETAS, ...
                         false, ...
                         'nest', valid10, ...
                         'rngSeed', 1107225);

valid50 = pathGeneration(validSet, ...
                         sprintf('valid%d', RNG_SEED), ...
                         50, ...
                         ESTIMATED_BETAS, ...
                         false, ...
                         'nest', valid25, ...
                         'rngSeed', 1107250);

valid100 = pathGeneration(validSet, ...
                          sprintf('valid%d', RNG_SEED), ...
                          100, ...
                          ESTIMATED_BETAS, ...
                          false, ...
                          'nest', valid50, ...
                          'rngSeed', 11072100);

valid250 = pathGeneration(validSet, ...
                          sprintf('valid%d', RNG_SEED), ...
                          250, ...
                          ESTIMATED_BETAS, ...
                          false, ...
                          'nest', valid100, ...
                          'rngSeed', 11072250);

valid500 = pathGeneration(validSet, ...
                          sprintf('valid%d', RNG_SEED), ...
                          500, ...
                          ESTIMATED_BETAS, ...
                          false, ...
                          'nest', valid250, ...
                          'rngSeed', 11072500);

% TODO: Take advantage of the nesting in the remainder of the pipeline, to avoid
%       duplication of computation.

paths = getPaths(valid500);
nDraws = 500;
model = 'rlWithLS';

%{
% ===========================================================================
% We compute the predictions and the losses with the path size logit model.
% ---------------------------------------------------------------------------
predictions = psPrediction(paths, nDraws, ESTIMATED_BETAS);

pathsWithObservations = addObservationsToPaths(validSet, paths);

predictionsWithObservations = psPrediction(pathsWithObservations, ...
                                           nDraws + 1, ...
                                           ESTIMATED_BETAS);

    % =======================================================================
    % We join the two predictions (we retrieve the probabilities from the 1st
    % one and the utilities from the 2nd one).
    % -----------------------------------------------------------------------
    obsIDs1 = [predictions.obsID]';
    paths1 = [predictions.path]';
    obsIDs2 = [predictionsWithObservations.obsID]';
    paths2 = [predictionsWithObservations.path]';
    probabilities = [predictions.probability]';

    nPaths1 = size(obsIDs1, 1);
    pathWidth1 = size(paths1, 1) / nPaths1;
    nPaths2 = size(obsIDs2, 1);
    pathWidth2 = size(paths2, 1) / nPaths2;

    paths1 = reshape(paths1, pathWidth1, nPaths1)';
    paths2 = reshape(paths2, pathWidth2, nPaths2)';

    % We pad paths1 with zeros so that it has the same width as paths2.
    paths1(nPaths1, pathWidth2) = 0;

    keys1 = [obsIDs1, paths1];
    keys2 = [obsIDs2, paths2];

    pred1Indices = ismember(keys2, keys1, 'rows');

    newProbabilities = zeros(nPaths2, 1);
    newProbabilities(pred1Indices) = probabilities;
    cellNewProbabilities = num2cell(newProbabilities);
    [predictionsWithObservations.probability] = cellNewProbabilities{:};

    predictions = predictionsWithObservations;
    % =======================================================================

M = nPathsPerLink(pathsWithObservations, nDraws + 1);
validSetUtilities = psUtilitiesForObservations(validSet, ESTIMATED_BETAS, M);

l = losses(validSetUtilities, predictionsWithObservations);
mean(l)
% ===========================================================================
%}

% =========================================================================
% We compute the predictions and the losses with the recursive logit model.
% -------------------------------------------------------------------------
if ~strcmp(model, 'rlWithLS') % model == 'rl'
    predictions = rlPredictionForPaths(paths, nDraws, ESTIMATED_BETAS_RL);
    % TODO: Only compute the following for observations that aren't in the
    %       choice sets (paths) ...
    %
    %       ... and only once for each validSet.
    [validSetUtilities, ~] = rlPrediction(validSet, ESTIMATED_BETAS_RL);
else
    predictions = rlPredictionForPaths(paths, ...
                                       nDraws, ...
                                       ESTIMATED_BETAS_RL, ...
                                       LINK_SIZE_BETAS);
    [validSetUtilities, ~] = rlPrediction(validSet, ...
                                          ESTIMATED_BETAS_RL, ...
                                          LINK_SIZE_BETAS);
end

l = losses(validSetUtilities, predictions);
mean(l)
% =========================================================================

% We save the predictions.
if strcmp(model, 'ps')
    betas = ESTIMATED_BETAS;
else
    betas = ESTIMATED_BETAS_RL;
end
fileID = sprintf('valid%d_%s_%d_%s_%s', ...
             RNG_SEED, ...
             [int2str(RNG_SEED), '2', int2str(nDraws)], ...
             nDraws, ...
             model, ...
             floatsToString(betas'));
save(['results/', fileID, '.mat'], 'predictions');
save(['results/', fileID, '_Observations.mat'], 'validSetUtilities');
